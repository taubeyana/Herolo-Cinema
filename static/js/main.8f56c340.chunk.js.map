{"version":3,"sources":["store/actions.js","store/reducers.js","store/configureStore.js","utils/fontAwesome.js","common/Button/Button.js","components/MovieCard/MovieCard.js","common/Backdrop/Backdrop.js","common/Modal/Modal.js","utils/validations.js","common/Input/Input.js","components/Forms/AddMovieForm.js","components/Forms/EditMovieForm.js","components/MoviesContainer/MoviesContainer.js","components/Header/Header.js","App.js","serviceWorker.js","index.js","img/defaultBackground.jpg","img/cinema.png"],"names":["addMovie","payload","type","movie","Title","Poster","Year","Runtime","Genre","Director","imdbID","editMovie","deleteMovie","setErrors","clearErrors","initialState","moviesList","movieInfo","errors","title","year","genre","runtime","director","existingMovie","rootReducer","state","arguments","length","undefined","action","Object","objectSpread","concat","toConsumableArray","errorMessage","error","map","filter","loggerMiddleware","createLogger","configureStore","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","library","add","faSearch","faPlus","faTimes","Button","props","react_default","a","createElement","className","onClick","label","icon","react_fontawesome_index_es","MovieCard","_this","this","style","backgroundImage","defaultBackground","common_Button_Button","handleClickOnEdit","onDeleteMovie","Component","Backdrop","closeModal","Modal","modalOpen","react","common_Backdrop_Backdrop","modalClose","children","formValidator","values","validator","isEmpty","isAlpha","blacklist","store","getState","find","checkExistingMovie","test","isInt","titleFormat","regex","toLowerCase","split","char","join","word","toUpperCase","slice","Input","onChange","handleChange","onBlur","autoCorrect","autoCapitalize","spellCheck","defaultValue","disabled","ref","inputRef","name","AddMovieForm","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onFormSubmit","e","preventDefault","handleFormSubmit","onFormCancel","current","value","validateForm","bool","dispatch","keys","uniqid","React","createRef","_this2","common_Modal_Modal","common_Input_Input","connect","EditMovieForm","onSubmit","MoviesContainer","toggleModal","setState","togglePopup","popupOpen","onEditMovie","id","selectedMovie","pop","formType","clearForm","handleClickOnDelete","selectedToDelete","confirmDeletion","onAddMovie","moviesInitialList","forEach","axios","get","then","data","catch","err","console","log","fetchMoviesList","Forms_AddMovieForm","Forms_EditMovieForm","components_MovieCard_MovieCard","assign","key","renderForm","loading","Header","src","logo","alt","App","es","components_MoviesContainer_MoviesContainer","components_Header_Header","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.8f56c340.chunk.js","sourcesContent":["import axios from 'axios';\r\nexport const ADD_MOVIE = \"ADD_MOVIE\";\r\nexport const GET_MOVIE = \"GET_MOVIE\";\r\nexport const EDIT_MOVIE = \"EDIT_MOVIE\";\r\nexport const DELETE_MOVIE = \"DELETE_MOVIE\";\r\nexport const SET_ERRORS = \"SET_ERRORS\";\r\nexport const CLEAR_ERRORS = \"CLEAR_ERRORS\";\r\n\r\nexport const addMovie = (payload) => ({\r\n    type: ADD_MOVIE,\r\n    movie: {\r\n        Title: payload.Title,\r\n        Poster: payload.Poster,\r\n        Year: payload.Year,\r\n        Runtime: payload.Runtime,\r\n        Genre: payload.Genre,\r\n        Director: payload.Director,\r\n        imdbID: payload.imdbID\r\n    }\r\n})\r\n\r\nexport const getMovie = (payload) => ({\r\n    type: GET_MOVIE,\r\n    payload\r\n})\r\n\r\nexport const editMovie = (payload) => ({\r\n    type: EDIT_MOVIE,\r\n    payload\r\n})\r\nexport const deleteMovie = (payload) => ({\r\n    type: DELETE_MOVIE,\r\n    payload\r\n})\r\n\r\nexport const setErrors = payload => ({\r\n    type: SET_ERRORS,\r\n    payload\r\n})\r\n\r\nexport const clearErrors = () => ({\r\n    type: CLEAR_ERRORS,\r\n    \r\n})\r\nexport const fetchMoviesList = () => {\r\n    let moviesInitialList = [\r\n        \"se7en\",\r\n        \"The Silence of the Lambs\",\r\n        \"The Game\",\r\n        \"The Whole Nine Yards\",\r\n        \"The Experiment\",\r\n        \"The Girl with the Dragon Tattoo\",\r\n        \"Ice Age\",\r\n        \"House\",\r\n        \"The Green Mile\",\r\n        \"American History X\",\r\n        \"Breaking Bad\",\r\n        \"Limitless\",\r\n        \"Braveheart\",\r\n        \"The Shawshank Redemption\",\r\n        \"Unthinkable\",\r\n        \"Pulp Fiction\",\r\n        \"The Dictator\",\r\n        \"Django Unchained\",\r\n        \"Crazy, Stupid, Love.\",\r\n        \"Hard Candy\"\r\n    ]\r\n    return (dispatch) => {\r\n        moviesInitialList.forEach(title => {\r\n            axios.get(`https://www.omdbapi.com/?t=${title}&apikey=33a73e97`)\r\n            .then(data => {\r\n                dispatch(addMovie(data.data))\r\n            })\r\n            .catch(err => console.log(err))\r\n        });\r\n    }\r\n}\r\n\r\nexport const fetchMovie = (title) => {\r\n    return dispatch => {\r\n        axios.get(`https://www.omdbapi.com/?t=${title}&apikey=33a73e97`)\r\n        .then(data => {\r\n            if (data.data.Response === 'True') {\r\n                dispatch(getMovie(data.data))\r\n            } else {\r\n                dispatch(setErrors(data.data.Error))\r\n            }\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n}","import {ADD_MOVIE, EDIT_MOVIE, DELETE_MOVIE , GET_MOVIE, SET_ERRORS, CLEAR_ERRORS } from '../store/actions'\r\n\r\nconst initialState = {\r\n    moviesList: [],\r\n    movieInfo: {\r\n        Title: '',\r\n        Poster: '',\r\n        Year: '',\r\n        Runtime: '',\r\n        Genre: '',\r\n        Director: '',\r\n        imdbID: ''\r\n    },\r\n    errors: {\r\n        title: '',\r\n        year: '',\r\n        genre: '',\r\n        runtime: '',\r\n        director: '',\r\n        existingMovie: ''\r\n    }\r\n}\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_MOVIE:\r\n            return ({\r\n                ...state, \r\n                moviesList: [\r\n                    action.movie,\r\n                    ...state.moviesList \r\n                ],\r\n                errorMessage: action.error\r\n            })\r\n        case GET_MOVIE:\r\n            return ({\r\n                ...state, \r\n                movieInfo: action.payload\r\n            })\r\n        case EDIT_MOVIE:\r\n            return ({\r\n                ...state,\r\n                moviesList: state.moviesList.map(movie => {\r\n                    if (movie.imdbID === action.payload.imdbID) return action.payload\r\n                    else return movie\r\n                })\r\n            })\r\n        case DELETE_MOVIE:\r\n            return ({\r\n                ...state,\r\n                moviesList: state.moviesList.filter(movie => {\r\n                   return movie.imdbID !== action.payload\r\n                })\r\n            })\r\n        case SET_ERRORS:\r\n            return {\r\n                ...state,\r\n                errors: {...action.payload}\r\n            }\r\n        case CLEAR_ERRORS: \r\n            return {\r\n                ...state,\r\n                errors: {}\r\n            }    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default rootReducer","import rootReducer from './reducers';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nconst loggerMiddleware = createLogger();\r\n\r\nconst configureStore = () => {\r\n    return createStore(\r\n        rootReducer,\r\n        composeWithDevTools(\r\n            applyMiddleware(\r\n                thunkMiddleware,\r\n                loggerMiddleware\r\n            )\r\n        )\r\n    )\r\n}\r\nexport default configureStore;","\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { \r\n    faSearch,\r\n    faPlus,\r\n    faTimes\r\n\r\n} from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(\r\n    faSearch,\r\n    faPlus,\r\n    faTimes\r\n);","import React from 'react';\r\nimport './Button.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst Button = props => {\r\n    return (\r\n        <button\r\n            className = { props.className ? props.className + \" btn\" : \"btn\"} \r\n            onClick = { props.onClick }\r\n            type = { props.type }>\r\n            { props.label || null } \r\n            { props.icon ? <FontAwesomeIcon icon = { props.icon } /> : null }\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button","import React, { Component }  from 'react';\r\nimport './MovieCard.css';\r\nimport Button from '../../common/Button/Button'\r\nimport defaultBackground from '../../img/defaultBackground.jpg';\r\n\r\nclass MovieCard extends Component {\r\n    render() {\r\n        let style = {}\r\n        if (this.props.Poster) {\r\n            style.backgroundImage= `url(${ this.props.Poster })`\r\n        } else {\r\n            style.backgroundImage= `url(${ defaultBackground })`\r\n        }\r\n        return (\r\n            <div className = \"movie-card\" style = { style } >\r\n                <div className='movie-details'>\r\n                    <div className = \"details-wrapper\"> \r\n                        <label> Title: </label>\r\n                        <span> { this.props.Title } </span>\r\n                    </div>\r\n                    <div className = \"details-wrapper\"> \r\n                        <label> Year: </label>\r\n                        <span> { this.props.Year } </span>\r\n                    </div>\r\n                    <div className = \"details-wrapper\"> \r\n                        <label> Genre: </label>\r\n                        <span> { this.props.Genre } </span>\r\n                    </div>\r\n                    <div className = \"details-wrapper\"> \r\n                        <label> Director: </label>\r\n                        <span> { this.props.Director } </span>\r\n                    </div>\r\n                    <div className = \"details-wrapper\"> \r\n                        <label> Runtime: </label>\r\n                        <span> { this.props.Runtime } </span>\r\n                    </div>\r\n                    <div className = \"movie-card-buttons\"> \r\n                        <Button onClick = { () => this.props.handleClickOnEdit(this.props.imdbID)} label = \"Edit\"/> \r\n                        <Button onClick = { () => this.props.onDeleteMovie(this.props.imdbID)} label = \"Delete\"/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            )\r\n    }\r\n} \r\n    \r\nexport default MovieCard;\r\n","import React from 'react';\r\nimport './Backdrop.css';\r\n\r\nconst Backdrop = props => {\r\n    return (\r\n        <div className = 'backdrop'\r\n            onClick = { () => props.closeModal() }>\r\n        </div>)\r\n}\r\n\r\nexport default Backdrop;","import React, { Fragment } from 'react';\r\nimport './Modal.css'\r\nimport Backdrop from '../Backdrop/Backdrop';\r\n\r\nconst Modal = props => {\r\n    return (\r\n       props.modalOpen ? \r\n        (<Fragment>\r\n            <Backdrop closeModal = { props.modalClose } ></Backdrop>\r\n            <div className = { props.className ? props.className + \" modal\" : \"modal\" }> \r\n                {props.children}\r\n            </div>\r\n        </Fragment>) \r\n        : null\r\n    )\r\n}\r\n\r\nexport default Modal;   ","import { store } from '../App';\r\nimport validator from 'validator';\r\n\r\nexport const checkExistingMovie = (title) => {\r\n    if (store.getState().moviesList.find(movie => movie.Title === title)) {\r\n        return true\r\n    }\r\n}\r\n\r\nexport const formValidator = (values) => {\r\n    let yearChecker = /(\\b(19|[2-9][0-9])\\d{2})$/;\r\n    let errors = {}\r\n    if (validator.isEmpty(values.Title)) {\r\n        errors.Title = 'Required'\r\n    } else if (!validator.isAlpha(validator.blacklist(values.Title, (', .')))) {\r\n        errors.Title = 'Title must contain only letters'\r\n    } else if  ( checkExistingMovie(values.Title) === true ) {\r\n        errors.Title = `Movie ${values.Title} already exist.`\r\n    }\r\n    if (validator.isEmpty(values.Year)) {\r\n        errors.Year = 'Required'\r\n    } else if (!yearChecker.test(values.Year)) {\r\n        errors.Year = 'This year should after 1900'\r\n    } if (validator.isEmpty(values.Genre)) {\r\n        errors.Genre = 'Required'\r\n    } else if (!validator.isAlpha(validator.blacklist(values.Genre, (', .')))) {\r\n        errors.Genre = 'Genre must contain only letters'\r\n    } if (validator.isEmpty(values.Runtime)) {\r\n        errors.Runtime = 'Required'\r\n    } else if (!validator.isInt(values.Runtime)) {\r\n        errors.Runtime = 'Please provide a runtime in minutes'\r\n    } if (validator.isEmpty(values.Director)) {\r\n        errors.Director = 'Required'\r\n    } else if (!validator.isAlpha(validator.blacklist(values.Director, (', .')))) {\r\n        errors.Director = 'Director must contain only letters'\r\n    } \r\n\r\n    return errors\r\n}\r\n\r\nexport const titleFormat = (title) => {\r\n    if (!title) {\r\n        return;\r\n    } else {\r\n        let regex = /([a-z]|\\s)/i\r\n        let formattedTitle = title.toLowerCase()\r\n                                .split('')\r\n                                .filter(char => regex.test(char))\r\n                                .join('')\r\n                                .split(' ')\r\n                                .map(word => word[0].toUpperCase() + word.slice(1)).join(' ')\r\n        return formattedTitle;\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nclass Input extends Component {\r\n    render() {\r\n        return (\r\n        <div className = 'input-wrapper'>\r\n            <label> { this.props.label } </label>\r\n            <input \r\n                onChange = { this.props.handleChange }\r\n                onBlur = { this.props.onBlur }\r\n                autoCorrect=\"off\" \r\n                autoCapitalize=\"off\" \r\n                spellCheck=\"false\"\r\n                type = \"text\" \r\n                defaultValue = { this.props.defaultValue }  \r\n                disabled = { this.props.disabled } \r\n                ref = { this.props.inputRef }\r\n                name = { this.props.name }>\r\n            </input>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default Input;   ","import React, { Component }  from 'react';\r\nimport uniqid from 'uniqid';\r\nimport './Forms.css'\r\nimport { connect } from 'react-redux';\r\nimport { titleFormat } from '../../utils/validations'\r\nimport Input from '../../common/Input/Input';\r\nimport Modal from '../../common/Modal/Modal';\r\nimport Button from '../../common/Button/Button';\r\nimport { formValidator } from '../../utils/validations';\r\nimport { setErrors } from '../../store/actions';\r\n\r\nclass AddMovieForm extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.title = React.createRef()\r\n        this.year = React.createRef()\r\n        this.genre = React.createRef()\r\n        this.runtime = React.createRef()\r\n        this.director = React.createRef()\r\n    }\r\n    onFormSubmit = (e) => {\r\n        e.preventDefault()\r\n        this.props.handleFormSubmit(this.props.movieInfo)\r\n        if (this.props.error === undefined) {\r\n            this.props.onFormCancel()\r\n        }\r\n    }\r\n    titleFormat = (e) => {\r\n        e.preventDefault()\r\n        this.title.current.value = titleFormat(this.title.current.value)\r\n    }\r\n\r\n    validateForm = (e,bool) => {\r\n        e.preventDefault()\r\n            const values = {\r\n                Title: this.title.current.value,\r\n                Year: this.year.current.value,\r\n                Genre: this.genre.current.value,\r\n                Runtime: this.runtime.current.value,\r\n                Director: this.director.current.value\r\n            }\r\n            let errors = formValidator(values)\r\n            this.props.dispatch(setErrors(errors))\r\n            \r\n            if (Object.keys(errors).length === 0){\r\n                values.Title = titleFormat(this.title.current.value)\r\n                values.imdbID = uniqid()\r\n                this.props.handleFormSubmit(values)\r\n                this.props.onFormCancel()\r\n            } \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal className = \"form-modal\"\r\n                modalOpen = { this.props.modalOpen } \r\n                modalClose = { this.props.modalClose }>\r\n                <form>\r\n                    <h1> Add a Movie </h1>\r\n                    <div className = \"form-input-fields\">\r\n                        <Input onBlur = { e => this.titleFormat(e) } label = \"Title\" inputRef = { this.title } />\r\n                        <span className = \"error-message\"> { this.props.errors.Title } </span>\r\n                        <Input label = \"Year\"  inputRef = { this.year }/>\r\n                        <span className = \"error-message\"> { this.props.errors.Year } </span>\r\n                        <Input label = \"Genre\"   inputRef = { this.genre }/>\r\n                        <span className = \"error-message\"> { this.props.errors.Genre } </span>\r\n                        <Input label = \"Runtime\"  inputRef = { this.runtime }/>\r\n                        <span className = \"error-message\"> { this.props.errors.Runtime } </span>\r\n                        <Input label = \"Director\"  inputRef = { this.director }/>\r\n                        <span className = \"error-message\"> { this.props.errors.Director } </span>\r\n                        <Input label = \"ID\"  disabled/>\r\n                    </div>\r\n                    <footer className = \"form-buttons\"> \r\n                        <Button className = \"save-btn\" onClick = { e => this.validateForm(e) } label = \"Save\"/> \r\n                        <Button className = \"close-btn\" onClick = { this.props.onFormCancel } icon = \"times\"/> \r\n                    </footer>\r\n                </form>\r\n            </Modal>\r\n        )\r\n    } \r\n}\r\nconst mapStateToProps = state => ({\r\n    movieInfo: state.movieInfo,\r\n    errors: state.errors\r\n})\r\nexport default connect(mapStateToProps)(AddMovieForm);","import React, { Component }  from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Input from '../../common/Input/Input';\r\nimport Modal from '../../common/Modal/Modal';\r\nimport Button from '../../common/Button/Button';\r\nimport { titleFormat } from '../../utils/validations'\r\nimport { formValidator } from '../../utils/validations';\r\nimport { setErrors } from '../../store/actions';\r\n\r\nclass EditMovieForm extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.title = React.createRef()\r\n        this.year = React.createRef()\r\n        this.genre = React.createRef()\r\n        this.runtime = React.createRef()\r\n        this.director = React.createRef()\r\n    }\r\n    onFormSubmit = (e) => {\r\n        e.preventDefault()\r\n        let movie = {\r\n            Title: this.title.current.value,\r\n            Year: this.year.current.value,\r\n            Genre: this.genre.current.value,\r\n            Runtime: this.runtime.current.value,\r\n            Director: this.director.current.value,\r\n            imdbID: this.props.movie.imdbID,\r\n            Poster: this.props.movie.Poster\r\n        }\r\n        this.props.handleFormSubmit(movie)\r\n        this.props.onFormCancel()\r\n    }\r\n\r\n    titleFormat = (e) => {\r\n        e.preventDefault()\r\n        this.title.current.value = titleFormat(this.title.current.value)\r\n    }\r\n\r\n    validateForm = (e,bool) => {\r\n        e.preventDefault()\r\n        if (!bool) this.onFormSubmit(e) \r\n        else {\r\n            const values = {\r\n                Title: this.title.current.value,\r\n                Year: this.year.current.value,\r\n                Genre: this.genre.current.value,\r\n                Runtime: this.runtime.current.value,\r\n                Director: this.director.current.value\r\n            }\r\n            let errors = formValidator(values)\r\n            this.props.dispatch(setErrors(errors))\r\n            if (Object.keys(errors).length === 0) this.onFormSubmit(e)\r\n        }\r\n    }\r\n\r\n     render() {\r\n        return (\r\n            <Modal className = \"form-modal\"\r\n                modalOpen = { this.props.modalOpen } \r\n                modalClose = { this.props.modalClose }>\r\n                <form onSubmit = { e => this.onFormSubmit(e) } >\r\n                    <h1> Edit a Movie </h1>\r\n                    <Input onBlur = { e => this.titleFormat(e) } label = \"Title\" defaultValue = { this.props.movie.Title } inputRef = { this.title }  />\r\n                    <span className = \"error-message\"> { this.props.errors.Title } </span>\r\n                    <Input label = \"Year\" defaultValue = { this.props.movie.Year }  inputRef = { this.year }/>\r\n                    <span className = \"error-message\"> { this.props.errors.Year } </span>\r\n                    <Input label = \"Genre\" defaultValue = { this.props.movie.Genre } inputRef = { this.genre }/>\r\n                    <span className = \"error-message\"> { this.props.errors.Genre } </span>\r\n                    <Input label = \"Runtime\" defaultValue = { this.props.movie.Runtime } inputRef = { this.runtime }/>\r\n                    <span className = \"error-message\"> { this.props.errors.Runtime } </span>\r\n                    <Input label = \"Director\" defaultValue = { this.props.movie.Director } inputRef = { this.director }/>\r\n                    <span className = \"error-message\"> { this.props.errors.Director } </span>\r\n                    <Input label = \"ID\" defaultValue = { this.props.movie.imdbID } disabled/>\r\n                    <footer className = \"form-buttons\"> \r\n                        <Button className = \"save-btn\" onClick = { e => this.validateForm(e, true) } label = \"Save\"/>\r\n                        <Button className = \"close-btn\" onClick = { this.props.onFormCancel } icon = \"times\"/> \r\n                    </footer>\r\n                </form>\r\n            </Modal>\r\n        )\r\n    } \r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    errors: state.errors\r\n})\r\nexport default connect(mapStateToProps)(EditMovieForm);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './MoviesContainer.css';\r\nimport MovieCard from '../MovieCard/MovieCard';\r\nimport Button from '../../common/Button/Button';\r\nimport Modal from '../../common/Modal/Modal';\r\nimport AddMovieForm from '../Forms/AddMovieForm';\r\nimport EditMovieForm from '../Forms/EditMovieForm';\r\nimport { fetchMoviesList, editMovie, deleteMovie, addMovie, clearErrors } from '../../store/actions'\r\n\r\nclass MoviesContainer extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            modalOpen: false,\r\n            formType: null,\r\n            selectedMovie: null,\r\n            popupOpen: false,\r\n            selectedToDelete: null,\r\n        }\r\n    }\r\n    toggleModal = () => {\r\n        this.setState({ \r\n            modalOpen: !this.state.modalOpen\r\n        })\r\n    }\r\n    togglePopup = () => {\r\n        this.setState({ \r\n            popupOpen: !this.state.popupOpen\r\n        })\r\n    }\r\n    componentDidMount() {\r\n        this.props.dispatch(fetchMoviesList()) \r\n    }\r\n    onEditMovie = (id) =>  {\r\n        let selectedMovie = this.props.moviesList\r\n                            .filter(movie => movie.imdbID === id)\r\n                            .pop()\r\n        this.setState({formType: 'edit',\r\n                       selectedMovie: selectedMovie})\r\n        this.toggleModal()\r\n    }\r\n    clearForm = () => {\r\n        this.props.dispatch(clearErrors())\r\n        this.toggleModal()\r\n    }\r\n\r\n    handleClickOnDelete = (id) =>  {\r\n        this.setState({ selectedToDelete: id })\r\n        this.togglePopup()\r\n    }\r\n    onFormSubmit = (movie) => {\r\n        if (this.state.formType === 'edit') {\r\n            this.props.dispatch(editMovie(movie))\r\n        }\r\n        if (this.state.formType === 'add') {\r\n            this.props.dispatch(addMovie(movie))\r\n        }\r\n    }\r\n    confirmDeletion = () => {\r\n        this.props.dispatch(deleteMovie(this.state.selectedToDelete))\r\n        this.togglePopup()\r\n    }\r\n    onAddMovie = () => {\r\n        this.toggleModal()\r\n        this.setState({ formType: 'add' })\r\n    }\r\n    renderForm() {\r\n        switch (this.state.formType) {\r\n            case \"add\":\r\n                return (\r\n                    <AddMovieForm \r\n                        modalOpen = { this.state.modalOpen } \r\n                        modalClose = { this.clearForm }\r\n                        onFormCancel = { this.clearForm } \r\n                        handleFormSubmit = { this.onFormSubmit } \r\n                        movie = { this.state.selectedMovie }>\r\n                    </AddMovieForm>\r\n                )\r\n            case \"edit\":\r\n                return (\r\n                    <EditMovieForm \r\n                        modalOpen = { this.state.modalOpen } \r\n                        modalClose = { this.clearForm }\r\n                        onFormCancel = { this.clearForm } \r\n                        handleFormSubmit = { this.onFormSubmit } \r\n                        movie = { this.state.selectedMovie }>\r\n                    </EditMovieForm> \r\n                )    \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <main className = \"movies-container\">\r\n               { this.props.moviesList\r\n                    .map(movie => <MovieCard {...movie } \r\n                    onDeleteMovie = { this.handleClickOnDelete } \r\n                    handleClickOnEdit = { this.onEditMovie } key = { movie.imdbID } />) }\r\n               <Button \r\n                    className = \"add-btn\"\r\n                    icon = \"plus\"\r\n                    onClick = { this.onAddMovie }>\r\n                </Button>\r\n                { this.state.modalOpen ? this.renderForm() : null }\r\n                <Modal className = \"popup\"\r\n                    modalOpen = { this.state.popupOpen }\r\n                    modalClose = { this.togglePopup }>\r\n                    <p> Are you sure you want to delete this movie?</p>\r\n                    <footer className = \"popup-buttons\">\r\n                        <Button onClick = { (e) => this.confirmDeletion(e) } label = \"OK\"/>   \r\n                        <Button onClick = { this.togglePopup } label = \"Cancel\"/>  \r\n                    </footer>\r\n                </Modal>\r\n            </main>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n        moviesList: state.moviesList,\r\n        loading: state.loading\r\n    })\r\nexport default connect(mapStateToProps)(MoviesContainer);","import React  from 'react';\r\nimport './Header.css';\r\nimport logo from '../../img/cinema.png';\r\n\r\nconst Header = () => (\r\n    <header className = \"app-header\">\r\n        <img className = \"logo\" src = { logo } alt = \"logo\"/>\r\n    </header>\r\n)\r\nexport default Header;","import React, { Component, Fragment } from 'react';\nimport { Provider } from 'react-redux';\nimport './store/configureStore';\nimport './App.css';\nimport './utils/fontAwesome';\nimport MoviesContainer from './components/MoviesContainer/MoviesContainer';\nimport Header from './components/Header/Header';\nimport configureStore from './store/configureStore';\n\nexport const store = configureStore()\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store = { store }>\n      <Fragment>\n        <MoviesContainer/>\n        <Header/>\n        </Fragment>\n      </Provider>\n      );\n    }\n  }\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/defaultBackground.a20a164c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cinema.596e4c3b.png\";"],"sourceRoot":""}